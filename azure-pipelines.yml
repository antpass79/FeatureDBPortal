# Build Pipeline - which build, test and publish artifact

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  azureDevOpsProjectName: 'FeatureDBPortal'
  feedName: 'FeatureDBPortal'

steps:
- task: Bash@3
  displayName: 'Synchronize Azure DevOps to Github'
  inputs:
    targetType: inline
    script: |
      echo 'git config'
      git config --global user.email ""
      git config --global user.name ""
      echo 'git loop all branches'
      git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
      echo 'git push all branches'
      # git push https://$SYNC@dev.azure.com/antpass79/FeatureDBPortal/_git/FeatureDBPortal -u --all
      git push https://dev.azure.com/antpass79/FeatureDBPortal/_git/FeatureDBPortal -u --all
  env:
    SYNC: $(sync)
    
- task: DotNetCoreCLI@2
  displayName: Restore packages
  inputs:
    command: restore
    projects: 'FeatureDBPortal.sln'

- task: DotNetCoreCLI@2
  displayName: 'Build FeatureDBPortal Solution'
  inputs:
    command: 'build'  
    arguments: '--configuration $(BuildConfiguration)'
    projects: FeatureDBPortal.sln

- task: DotNetCoreCLI@2
  displayName: 'Publishing Blazor App'
  inputs:
    command: publish
    publishWebProjects: true
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: false

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\\**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publishing Build Artifacts'