@inherits CombinationMatrixDataModel

<style>
    .spinner-container {
        display: flex;
        position: absolute;
        z-index: 999;
        width: 100%;
        height: 100%;
        background: lightgray;
        opacity: 0.3;
        align-items: center;
    }

    .table {
        border-collapse: collapse;
        width: 100%;
        height: 100%;
    }

        .table td, .table th {
            padding: .35rem;
        }

        .table > tr:nth-child(even) {
            background-color: lightgray;
        }

        .table > tr:nth-child(odd) {
            background-color: white;
        }

    .table-fixed-header {
        overflow-y: auto;
    }

        .table-fixed-header thead th {
            position: sticky;
            top: 0;
        }

    .combination-component {
        display: flex;
        flex-direction: column;
        flex: 1;
        height: 100%;
    }

    .combination-matrix {
        overflow: auto;
        height: 100%;
    }
</style>

<div class="combination-component">
    <div class="combination-filters">
        <MatCheckbox Label="Hide empty rows/columns" TValue="bool" Value="@Filters.KeepIfIdNotNull"></MatCheckbox>
        <MatCheckbox Label="Hide empty allow mode cells" TValue="bool" Value="@Filters.KeepIfCellAllowModeNotNull"></MatCheckbox>
        <MatButton @onclick="@(async () => OnApplyFilters())"></MatButton>
    </div>

    <div class="combination-matrix">
        @if (Combination == null)
        {
            <p class="logo-text"><em>No Available Combinations</em></p>
        }
        else
        {
            <table class="table table-fixed-header">
                <thead>
                    <HeaderComponent IntersectionTitle="@Combination.IntersectionTitle" Columns="@Combination.ProjectedColumns.Values"></HeaderComponent>
                </thead>
                <tbody>
                    <BodyComponent CellMouseEnter="@(async currentCell => OnCellMouseEnter(currentCell))" CellMouseLeave="@(async currentCell => OnCellMouseLeave(currentCell))" CellClick="@(async currentCell => OnCellClick(currentCell))" Rows="@Combination.ProjectedRows.Values"></BodyComponent>
                </tbody>
            </table>
        }
    </div>
</div>