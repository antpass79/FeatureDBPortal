@inherits CombinationMatrixDataModel

<style>
    .spinner-container {
        display: flex;
        position: absolute;
        z-index: 999;
        width: 100%;
        height: 100%;
        background: lightgray;
        opacity: 0.3;
        align-items: center;
    }

    tr:nth-child(even) {
        background-color: lightgray;
    }

    tr:nth-child(odd) {
        background-color: white;
    }

    .table {
        height: 100%;
    }
    .table td, .table th {
        padding: .35rem;
    }

    .table-fixed-header {
        overflow-y: auto;
    }

        .table-fixed-header thead th {
            position: sticky;
            top: 0;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
    }

    th {
        background: #eee;
    }

    th.rotate {
        height: 140px;
        min-width: 50px;
        white-space: nowrap;
    }

        th.rotate > div {
            transform: translate(0px, 0px) rotate(315deg);
            width: 0px;
        }

            th.rotate > div > span {
                padding: 5px 10px;
            }

    td.row-title {
        font-weight: bold;
        vertical-align: middle;
        position: sticky;
        position: -webkit-sticky;
        min-width: 100px;
        left: 0px;
        background-color: inherit;
    }

    .available-background {
        background-color: cadetblue;
    }

    .no-background {
        background-color: burlywood;
    }

    th.fixed-column {
        position: sticky;
        position: -webkit-sticky;
        min-width: 100px;
        left: 0px;
        z-index: 1;
    }

    .combination-matrix {
        overflow: auto;
        height: 100%;
    }

    .highlight {
        opacity: 0.7;
    }

</style>

<div class="combination-matrix">
    @if (Combination == null)
    {
        <p class="logo-text"><em>No Available Combinations</em></p>
    }
    else
    {
        <table class="table table-fixed-header">
            <thead>
                <tr>
                    <th class="rotate fixed-column">
                        <div><span>@Combination.Headers[0].Name</span></div>
                    </th>
                    @for (var i = 1; i < Combination.Headers.Count; i++)
                    {
                        <th class="rotate">
                            <div><span>@Combination.Headers[i].Name</span></div>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in Combination.Rows)
                {
                <tr>
                    <td class="row-title">
                        @row.TitleCell.Name
                    </td>
                    @foreach (var cell in row.Cells)
                    {
                        //if (cell.Items == null)
                        if (string.IsNullOrWhiteSpace(cell.AggregateItems))
                        {
                            <td @onmouseover="@(async e => OnCellMouseEnter(cell))" @onmouseout="@(async e => OnCellMouseLeave(cell))" class="@cell.ClassValue">@cell.AllowMode</td>
                        }
                        else
                        {
                            <td>@cell.AggregateItems</td>
                            @*<td>
                                @foreach (var item in cell.Items)
                                {
                                    <span>@item.Name</span>
                                }
                            </td>*@
                        }
                    }
                </tr>
                }
            </tbody>
        </table>
    }
</div>
