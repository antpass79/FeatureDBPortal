@inherits CombinationMatrixDataModel

<style>
    .spinner-container {
        display: flex;
        position: absolute;
        z-index: 999;
        width: 100%;
        height: 100%;
        background: lightgray;
        opacity: 0.3;
        align-items: center;
    }

    .logo {
        display: flex;
        align-self: center;
    }

    .logo-text {
        flex: 1;
        align-self: center;
        margin: 15px;
    }

    .table {
        border-collapse: collapse;
        width: 100%;
        height: 100%;
    }

        .table td, .table th {
            padding: .35rem;
        }

        .table > tr:nth-child(even) {
            background-color: lightgray;
        }

        .table > tr:nth-child(odd) {
            background-color: white;
        }

    .table-fixed-header {
        overflow-y: auto;
    }

        .table-fixed-header thead th {
            position: sticky;
            top: 0;
        }

    .mat-component {
        margin: 5px;
        align-self: center;
        align-content: center;
        align-items: center;
    }

    .mat-checkbox > .mdc-form-field > label {
        padding-top: 5px !important;
    }

    .combination-component {
        display: flex;
        flex-direction: column;
        flex: 1;
        height: 100%;
    }

    .combination-filters {
        display: flex;
        background-color: rgb(238,238,238);
    }

    .combination-matrix {
        overflow: auto;
        height: 100%;
    }
</style>

<div class="combination-component">
    <div class="combination-filters">
        <MatStringField Class="mat-component" Icon="search" Label="Filter Rows" @bind-Value="@Filters.KeepIfRowTitleContains"></MatStringField>
        <MatStringField Class="mat-component" Icon="search" Label="Filter Columns" @bind-Value="@Filters.KeepIfColumnTitleContains"></MatStringField>
        <MatCheckbox Class="mat-component" Label="Hide empty id" TValue="bool" @bind-Value="@Filters.KeepIfIdNotNull"></MatCheckbox>
        <MatCaption Class="mat-component" >Show mode: </MatCaption>
        <MatCheckbox Class="mat-component mat-checkbox" Label="Not Empty" TValue="bool" @bind-Value="@Filters.KeepIfCellModeNotNull"></MatCheckbox>
        <MatCheckbox Class="mat-component mat-checkbox" Label="A" TValue="bool" @bind-Value="@Filters.KeepIfCellModeA"></MatCheckbox>
        <MatCheckbox Class="mat-component mat-checkbox" Label="Def" TValue="bool" @bind-Value="@Filters.KeepIfCellModeDef"></MatCheckbox>
        <MatCheckbox Class="mat-component mat-checkbox" Label="No" TValue="bool" @bind-Value="@Filters.KeepIfCellModeNo"></MatCheckbox>
        <MatButton Class="mat-component" Icon="filter_list" Raised="true" @onclick="@(async () => await OnApplyFilters())">Apply</MatButton>
    </div>
    <MatDivider></MatDivider>

    @if (Busy)
    {
        <div class="logo">
            <SpinKitCircle />
            <p class="logo-text"><em>@DataMessage</em></p>
        </div>
    }
    else
    {
        <div class="combination-matrix">
            @if (Combination == null)
            {
                <p class="logo-text"><em>No Available Combinations</em></p>
            }
            else
            {
                <table class="table table-fixed-header">
                    <thead>
                        <HeaderComponent IntersectionTitle="@Combination.IntersectionTitle" Columns="@Combination.ProjectedColumns.Values"></HeaderComponent>
                    </thead>
                    <tbody>
                        <BodyComponent ShouldRefresh="@ShouldRefresh" CellMouseEnter="@(async currentCell => OnCellMouseEnter(currentCell))" CellMouseLeave="@(async currentCell => OnCellMouseLeave(currentCell))" CellClick="@(async currentCell => OnCellClick(currentCell))" Rows="@Combination.ProjectedRows.Values"></BodyComponent>
                    </tbody>
                </table>
            }
        </div>
    }
</div>